doctype html
html
head
  meta(charset="utf-8")

  title Next Level D3

  meta(name="description", content="Slides from my \"Advanced D3\" talk")
  meta(name="author", content="Amit Schechter")

  meta(name="apple-mobile-web-app-capable", content="yes")
  meta(name="apple-mobile-web-app-status-bar-style", content="black-translucent")
  meta(name="viewport", content="width=device-width, initial-scale=1.0, maximum-scale=1.0, user-scalable=no")

  link(rel="stylesheet", href="css/reveal.min.css")
  link(rel="stylesheet", href="css/theme/serif.css", id="theme")

  //- For syntax highlighting
  link(rel="stylesheet", href="lib/css/zenburn.css")

  style.
    .reveal {
      cursor:pointer;
    }

    .right-hand {
      text-align: right;
      float: right
    }
    .reveal pre code, .reveal pre .code {
      padding: 20px;
    }
    .reveal .right-hand pre {
      width: auto;
      margin: 0;
    }
    .reveal .right-hand pre code {
      padding: 20px 40px;
      max-height: none;
    }

    //- .code-context {}
    .reveal pre.code-left {
      float: left;
      width: 48%;
      font-size: .45em;
    }
    .reveal pre.code-right {
      width: 48%;
      float: right;
      font-size: .45em;
    }
    .reveal pre.code-fullwidth {
      width: 100%;
    }

    .reveal .link-frame {
      background: white;
      border: 1px solid #aaa;
      padding: 40px 60px;
      display:inline-block;
    }
    .reveal .link-frame a {
      color: #0099ff;
    }

  body
    .reveal
      .slides
        section
          h1 next level d3
          p(style="line-height:.8; margin-bottom:0;")
            small By <a href="http://two-n.com">Amit Schechter</a> / <a href="http://twitter.com/meetamit">@meetamit</a>
            br
            small Co-founder, <a href="http://two-n.com">TWO-N</a>
            br
            a(href="http://two-n.com", style="display:inline-block; opacity:.6; background:url(lib/img/2n_logo.png) no-repeat center center; background-size:contain; width:90px; height:90px;")
            br
          br
          p Slides available at
            br
            a(href="http://www.two-n.com/talks/next-level-d3") www.two-n.com/talks/next-level-d3

        section
          section(data-background="http://two-n.com/projects/art-genome-browser/1.jpg", data-background-size="contain")
          section(data-background="http://two-n.com/projects/art-genome-browser/2.jpg", data-background-size="contain")
          section(data-background="http://two-n.com/projects/art-genome-browser/3.jpg", data-background-size="contain")
          section(data-background="http://two-n.com/projects/art-genome-browser/5.jpg", data-background-size="contain")

          section(data-background="http://two-n.com/projects/lgbt-divide/3.jpg", data-background-size="contain")
          section(data-background="http://two-n.com/projects/lgbt-divide/4.jpg", data-background-size="contain")

          section(data-background="http://two-n.com/projects/stockmapper/1.jpg", data-background-size="contain")
          section(data-background="http://two-n.com/projects/stockmapper/2.jpg", data-background-size="contain")

          section(data-background="lib/img/talent-lab_1.png", data-background-size="contain")
          section(data-background="lib/img/talent-lab_2.png", data-background-size="contain")
          section(data-background="lib/img/talent-lab_3.png", data-background-size="contain")

          section
            <iframe src="https://player.vimeo.com/video/125092880?autoplay=1&color=ff9933&title=0&byline=0" width="800" height="600" frameborder="0" webkitallowfullscreen mozallowfullscreen allowfullscreen></iframe>

          section(data-background="http://two-n.com/projects/wind4d/2.jpg", data-background-size="contain")

          section
            h2 Current stack
            ul
              li d3
              li.fragment React
              li.fragment Node.js
            p
              img.fragment(src="lib/img/stack-overflow.png", style="border:none;")
          section
            h2(data-markdown) [two-n.com](http://www.two-n.com)
            h2(data-markdown) [@2nfo](http://www.twitter.com/2nfo)
            h2(data-markdown) [@meetamit](http://www.twitter.com/meetamit)


        section(data-background-iframe="lib/iframe-content.html")
          h4.link-frame.fragment
            span Part 1:&nbsp;
              a(href="http://bl.ocks.org/mbostock/3808218", target="_blank") bl.ocks.org/mbostock/3808218
              br
            span Part 2:&nbsp;
              a(href="http://bl.ocks.org/mbostock/3808221", target="_blank") bl.ocks.org/mbostock/3808221
              br
            span Part 3:&nbsp;
              a(href="http://bl.ocks.org/mbostock/3808234", target="_blank") bl.ocks.org/mbostock/3808234
              br

        section
          h3(data-markdown) Render **everything** in *update*()

        section(data-background-iframe="lib/iframe-content.html")
          .right-hand.fragment
            pre(style="margin-top:280px;")
              code.javascript.
                // The initial display.
                update(alphabet);

                // Grab a random sample of letters
                setInterval(function() {
                  update(shuffle(alphabet)
                      .slice(0, Math.floor(
                        Math.random() * 26
                      ))
                      .sort());
                }, 1500);

        section
          h3(data-markdown) More understandable code

        section(data-background-iframe="lib/iframe-content.html")
          .right-hand
            h4 update()
            pre
              code.javascript.
                function update(data) {

                  // DATA JOIN
                  var text = svg.selectAll("text")
                      .data(data);

                  // EXIT
                  text.exit()
                      .attr("class", "exit")
                    .transition()
                      .attr("y", 60)
                      ...
                      .remove();

                  // UPDATE
                  text.attr("class", "update")
                    .transition()
                      .attr("x", function(d, i) { return i * 32; });

                  // ENTER
                  text.enter().append("text")
                      .attr("class", "enter")
                      ...
                }

        section
          h3(data-markdown) Don't care about what changed â€”
          h3(data-markdown) Only that *something* changed
          h4.fragment ... less bugs

        section
          h3(data-markdown) Integrates well with other frameworks

        section
          section
            h4 With Backbone
            pre
              code.javascript.
                var ChartView = Backbone.View.extend({
                  // a.k.a update()
                  render: function() {
                    d3.select(this.el).selectAll("text")
                      .data(this.model);
                    // Update, Enter, Exit
                    ...
                  }
                });
          section
            h4 With React
            pre
              code.coffeescript.
                React.createClass({
                  render: function() {
                    return <div ref="node" className="node"></div>;
                  },

                  componentDidUpdate: function() {
                    sel = d3.select(this.refs.node).selectAll('.child')
                      .data(this.props.data)
                    // Update, Enter, Exit
                    ...
                  },

                  componentDidMount: function() {
                    this.forceUpdate();
                  }
                });
          section
            ul
              h3 Drawbacks of rendering everything?
              li.fragment Possibly some unnecessary re-joining and updating
              li.fragment ... probably not a problem
              li.fragment Don't pre-optimize
              li.fragment You can later add checks for actual state changes

        section
          section
            h2 Conditional Element Creation
          section
            h4 (That's not it)
            pre
              code.javascript.
                // Create svg upon initialization
                var svg = d3.select("body").append("svg")

                function update(data) {
                  // DATA JOIN
                  var text = svg.selectAll("text")
                      .data(data);
                  ...
                }
            h4.fragment We want to move svg creation into update()
          section
            h4 (Definitely not it)
            pre
              code.javascript.
                function update(data) {
                  // WRONG!!! Creates another svg on every update
                  var svg = d3.select("body").append("svg")

                  // DATA JOIN
                  var text = svg.selectAll("text")
                      .data(data);
                  ...
                }
          section
            h4 Using if statement
            pre.highlight
              .code.javascript
                span.
                  function update(data) {
                span.fragment(data-fragment-index="1").
                  &nbsp;
                    var svg = d3.select("body").select("svg")
                span.fragment(data-fragment-index="2").
                  &nbsp;
                    if (svg.empty()) {
                span.fragment(data-fragment-index="3").
                  &nbsp;
                      // Conditionally create the SVG
                      svg = d3.select("body").append("svg")
                span.fragment(data-fragment-index="2").
                  &nbsp;
                    }

                span.
                  &nbsp;
                    // DATA JOIN
                    var text = svg.selectAll("text")
                        .data(data);
                  }
            h4.fragment Ok, but iffy
        section
          section
            h2 The [null] trick
            h4 Use D3's enter, update, exit selections
          section
            h4 The [null] trick
            pre.highlight
              .code.javascript
                span.
                  // Conditionally create the SVG
                  var svg = d3.select("body").selectAll("svg")
                span.fragment.
                  &nbsp;
                        .data([null])

                span.fragment.
                  &nbsp;
                  svg.enter() // a 1-element selection the first time ONLY
                    .append("svg")
                span.fragment.
                  &nbsp;
                    .attr("width", width)
                    .attr("height", height);
          section
            h4 The [null] trick
            pre
              code.javascript.
                function update(data) {
                  // Conditionally create the SVG
                  var svg = d3.select("body").selectAll("svg")
                        .data([null])
                      .enter()
                        .append("svg")

                  // DATA JOIN
                  var text = svg.selectAll("text")
                      .data(data);
                  ...
                }
        section
          section
            h2 Example: Responsiveness
            h4 Easy when everything is inside update()
          section
            h4 Responsiveness
            pre.highlight
              .code.javascript
                span.
                  d3.select(window).on("resize", update);

                  function update() {
                span.fragment(data-fragment-index="1").
                  &nbsp;
                    var width  = window.width  - margin * 2,
                        height = window.height - margin * 2,
                        enabled = width > 200;// only show chart if there's room

                span.fragment(data-fragment-index="2").
                  &nbsp;
                    var svg = d3.select("body").selectAll("svg")
                          .data(enabled ? [null] : [])

                span.fragment(data-fragment-index="4").
                  &nbsp;
                    svg.merge(
                span.fragment(data-fragment-index="3").
                  &nbsp;
                      svg.enter().append("svg")
                span.fragment(data-fragment-index="4").
                  &nbsp;
                    )
                    .attr("width", width)
                    .attr("height", height);

                span.fragment(data-fragment-index="5").
                  &nbsp;
                    svg.exit()
                      .remove()
                span.
                  &nbsp;
                  }

        section
          section
            h2(data-markdown) selection.**each**()
          section
            h3(data-markdown) selection.**each**( *function* )
            p(data-markdown) Invokes the specified *function* for each element in the current selection, passing in the current datum `d` and index `i`, with the `this` context of the current DOM element.
            pre.highlight
              .code.javascript
                span.
                  svg.selectAll("rect.bar")
                    .each(function(d, i) {
                span.fragment.
                  &nbsp;
                      console.log(this); // &lt;rect class="bar">&lt;/rect>
                span.
                  &nbsp;
                    })

          section
            h3(data-markdown) selection.**each**( *function* )
            pre
              code.javascript.
                svg.selectAll("circle")
                  .attr("cx",   function(d,i) { return xScale(d.unemployment); })
                  .attr("cy",   function(d,i) { return yScale(d.debt);         })
                  .attr("r",    function(d,i) { return rScale(d.gdp);          })
                  .attr("fill", function(d,i) { return colorScale(i);          });
            h3 â‡•
            pre.highlight
              .code.javascript
                span.
                  svg.selectAll("circle")
                    .each(function(d,i) {
                span.fragment.
                  &nbsp;
                      d3.select(this)
                span.fragment.
                  &nbsp;
                        .attr("cx",   xScale(d.unemployment))
                        .attr("cy",   yScale(d.debt)        )
                        .attr("r",    rScale(d.gdp)         )
                        .attr("fill", colorScale(i)         );
                span.
                  &nbsp;
                    })
        section
          section
            h2(data-markdown) Reasons to use .**each**()?
          section
            h4 Less re-computation
            pre.highlight
              .code.javascript
                span.
                    svg.selectAll("circle")
                      .each(function(d,i) {
                        var centroid = computeCentroid(d.pointCloud);// [43, 21]
                span.fragment.
                    &nbsp;
                        d3.select(this)
                          .attr("cx", centroid[0])
                          .attr("cy", centroid[1]);
                span.
                    &nbsp;
                      })
          section
            h4 Flow Control
            pre.highlight
              .code.javascript
                span.
                  svg.selectAll(".shape")
                    .each(function(d,i) {
                      var centroid = computeCentroid(d.pointCloud);
                span.fragment.
                    &nbsp;
                        if(d.shape == "circle") {
                          d3.select(this)
                            .attr("cx", centroid[0])
                            .attr("cy", centroid[1]);
                        }
                span.fragment.
                    &nbsp;
                        if(d.shape == "rect") {
                          d3.select(this)
                            .attr("x", centroid[0])
                            .attr("y", centroid[1]);
                        }
                span.
                    &nbsp;
                      })
        section
          section
            h3(data-markdown) .**each**() with nested data
          section(data-background-iframe="http://bost.ocks.org/mike/nest/")
          section
            h3(data-markdown) .**each**() with nested data
            pre.code-left
              code.javascript.
                var data = [
                  { gdp:123, unemp:9, label:"Greece" },
                  { gdp:456, unemp:7, label:"France" },
                  { gdp:789, unemp:5, label:"USA"    },
                  ...
                ]
            pre.fragment.code-right
              code.javascript.
                var tr = table.selectAll("tr")
                  .data(data);
                tr.enter()
                  .append("tr");
                &nbsp;
                &nbsp;
            pre.fragment.highlight.code-fullwidth(style="clear:both;")
              .code.javascript
                span.
                  tr
                    .each(function(entity, i) {
                span.fragment.current-visible.
                  &nbsp;
                      console.log(this); // &lt;tr>&lt;/tr>
                span.fragment.
                  &nbsp;
                      var td = d3.select(this).selectAll("td")
                        .data([entity.label, entity.gdp, entity.unemp])
                span.fragment.current-visible.
                  &nbsp;
                      // ["Greece", 123, 9]
                span.fragment.
                  &nbsp;
                      td.enter()
                        .append("td")
                span.fragment.
                  &nbsp;
                      td
                        .text(function(variable, j) {
                          return variable;
                        })
                span.
                  &nbsp;
                    })

          section
            h3(data-markdown) Nested Selections
            pre.code-left
              code.javascript.
                var data = [
                  { gdp:123, unemp:9, label:"Greece" },
                  { gdp:456, unemp:7, label:"France" },
                  { gdp:789, unemp:5, label:"USA"    },
                  ...
                ]
            pre.code-right
              code.javascript.
                var tr = table.selectAll("tr")
                  .data(data);
                tr.enter()
                  .append("tr");
                &nbsp;
                &nbsp;
            pre.highlight.fragment.code-fullwidth(style="clear:both;")
              .code.javascript
                span.
                  var td = tr.selectAll("td")
                    .data(function(entity, i) {
                span.fragment.current-visible.
                  &nbsp;// e.g. { gdp:789, unemp:5, label:"USA" }
                span.fragment.
                  &nbsp;
                      return [entity.label, entity.gdp, entity.unemp]
                span.
                  &nbsp;
                    })
                span.fragment.
                  &nbsp;
                  td.enter()
                    .append("td")
                  td
                    .text(function(variable, j) {
                      return variable;
                    })
          section
            h3(data-markdown) .**each**( *function* ) vs .**data**( *function* )
            pre.highlight.code-left
              .code.javascript
                span.
                  tr.each(function(d, i) {
                    var td = d3.select(this).selectAll("td")
                span.fragment(data-fragment-index="1").
                  &nbsp;
                      .data([d.label, d.gdp, d.unemp]);

                span.fragment(data-fragment-index="2").
                  &nbsp;
                    td.enter()
                      .append("td");
                span.fragment(data-fragment-index="3").
                  &nbsp;
                    td
                      .text(function(variable, j) {
                        return variable;
                      })
                span.fragment(data-fragment-index="4").
                  &nbsp;

                    color = d.unemp < 7 ? "red" : "black";
                    td.style("color", color);
                span.
                  &nbsp;
                  });
                  &nbsp;
                  &nbsp;
                  &nbsp;
                  &nbsp;
            pre.highlight.code-right
              .code.javascript
                span.
                  var td = tr.selectAll("td")
                span.fragment(data-fragment-index="1").
                  &nbsp;
                    .data(function(d, i) {
                      return [d.label, d.gdp, d.unemp];
                    });

                span.fragment(data-fragment-index="2").
                  &nbsp;
                  td.enter()
                    .append("td");
                span.fragment(data-fragment-index="3").
                  &nbsp;
                  td
                    .text(function(variable, j) {
                      return variable;
                    })
                span.fragment(data-fragment-index="5").
                  &nbsp;
                    .style("color", function(variable, j) {
                span.fragment(data-fragment-index="6").
                  &nbsp;
                      // this <=> &lt;td>&lt;/td>
                      // this.parentNode <=> &lt;tr>&lt;/tr>
                span.fragment(data-fragment-index="7").
                  &nbsp;
                      var d = d3.select(this.parentNode)
                        .datum();
                      return d.unemp < 7 ? "red" : "black";
                span.fragment(data-fragment-index="5").
                  &nbsp;
                    })
            p(style="padding-top:150px; font-size:.9em;") â‡”


        section
          section
            h2(data-markdown) selection.**call**()
          section
            h3(data-markdown) selection.**call**( *function* )
            p(data-markdown) Invokes the specified function once, passing in the current selection along with any optional arguments.
            pre.highlight
              .code.javascript
                span.
                  var g = svg.selectAll("g");

                span.fragment.
                  &nbsp;
                  function fn(sel) {
                    sel.attr("color", "red")
                  }

                span.fragment.
                  &nbsp;
                  fn(g) â‡” g.call(fn)
                span.fragment.
                  &nbsp;
                  &nbsp;
                  g.call(function(sel) {
                    sel.attr("color", "red")
                  })
        section
          section
            h2 Use .call() to organize code
            h4
              a(href="http://williamsinstitute.law.ucla.edu/lgbtdivide/#/education/2", target="_blank") Demo
          section(data-background-iframe="http://prototypes.two-n.com/williams/#/education/2")
            pre.highlight.fragment.code-left
              .code.javascript
                span.
                  var g = svg.selectAll("g")
                    .data(regions);
                span.fragment.
                  &nbsp;
                  &nbsp;
                  var gEnter = g.enter()
                    .append("g")
                    .__ // Create g
                span.fragment.
                  &nbsp;
                  &nbsp;
                  gEnter.append("circle")
                    .attr("class", "solid-circle")
                    .__ // Create SOLID circle
                span.fragment.
                  &nbsp;
                  &nbsp;
                  gEnter.append("circle")
                    .attr("class", "dashed-circle")
                    .__ // Create DASHED circle
                span.fragment.
                  &nbsp;
                  &nbsp;
                  &nbsp;
                  var merged = g.merge(gEnter)
                    .attr("transform", function(d,i) {})
                    .__ // Update g
                span.fragment.
                  &nbsp;
                  &nbsp;
                  merged.select('.solid-circle')
                    .attr("r", function(d,i) {
                      return rScale(d.specific);
                    })
                    .__ // Update SOLID circle
                span.fragment.
                  &nbsp;
                  &nbsp;
                  merged.select('.dashed-circle')
                    .attr("r", function(d,i) {
                      return rScale(d.general);
                    })
                    .__ // Update DASHED circle
            pre.highlight.fragment.code-right
              .code.javascript
                span.
                  var g = svg.selectAll("g")
                    .data(regions);
                  &nbsp;
                  var gEnter = g.enter()
                    .append("g")
                    .__ // Create g
                    .call(function(gEnter) {
                span.fragment.
                  &nbsp;
                      gEnter.append("circle")
                        .attr("class", "solid-circle")
                        .__ // Create SOLID circle

                      gEnter.append("circle")
                        .attr("class", "dashed-circle")
                        .__ // Create DASHED circle
                span.
                  &nbsp;
                    });

                  g.merge(gEnter)
                    .__ // Update g
                    .call(function(merged) {
                span.fragment.
                  &nbsp;
                      merged.select('.solid-circle')
                        .attr("r", function(d,i) {
                          return rScale(d.specific);
                        })
                        .__ // Update SOLID circle
                  &nbsp;
                      merged.select('.dashed-circle')
                        .attr("r", function(d,i) {
                          return rScale(d.general);
                        })
                        .__ // Update DASHED circle
                span.
                  &nbsp;
                    });
            p(style="padding-top:150px; font-size:.9em;").fragment â‡”

          section
            h3 Refactoring
            pre.highlight
              .code.javascript
                span.
                  var g = svg.selectAll("g")
                    .data(regions);

                  var gEnter = g.enter()
                    .append("g")
                    .call(createSymbol);

                  g.merge(gEnter)
                    .call(updateSymbol);

                span.fragment.
                  &nbsp;
                  function createSymbol(gEnter) {
                    // create circles
                  }

                  function updateSymbol(g) {
                    // update circles
                  }
        section
          section
            h2 Can we do better?
            h4.fragment (yes)
          section(data-background-iframe="http://codepen.io/meetamit/full/NPNaXQ/")
            section
              h3 Single update function
              pre.highlight
                .code.javascript
                  span.
                    var g = svg.selectAll("g")
                      .data(regions);

                  span.fragment(data-fragment-index="2").
                    &nbsp;
                    g.merge(
                  span.fragment(data-fragment-index="1").
                    &nbsp;
                      g.enter().append("g")
                  span.fragment(data-fragment-index="2").
                    &nbsp;
                    )
                  span.fragment(data-fragment-index="3").
                    &nbsp;
                    .call(symbol);

                    function symbol(sel) {
                      // create & update circles
                    }
              p.fragment(data-markdown) **symbol()** is [reusable](http://codepen.io/meetamit/full/NPNaXQ/)
        section
          section
            h2 Writing Reusable Code
          section(data-background-iframe="http://bost.ocks.org/mike/chart/")
            h4.link-frame.fragment
              a(href="http://bost.ocks.org/mike/chart/") http://bost.ocks.org/mike/chart/
        section
          section
            h2 d3-axis is reusable
          section
            h3
              em axis
              span.fragment(data-fragment-index="3") &nbsp;is a
                em &nbsp;function
              span.fragment(data-fragment-index="5") &nbsp;that has
                em &nbsp;functions
            pre.highlight
              .code.javascript
                span.
                  var axis = d3.axisBottom();

                span.fragment(data-fragment-index="1").
                  var g = svg.append("g");

                  g.call(axis);
                span.fragment(data-fragment-index="2").
                  &nbsp;// â‡” axis(g)
                span.fragment(data-fragment-index="4").
                  &nbsp;
                  &nbsp;
                  axis.scale(d3.scaleLinear());
        section
          section
            h3 Functions can have functions
          section
            h3(data-markdown) *function* that has *function*
            pre.highlight
              .code.javascript
                span.fragment(data-fragment-index="6").
                  &nbsp;
                  var color = "gray";
                span.
                  &nbsp;
                  function colorize(sel) {
                span.fragment(data-fragment-index="5").
                  &nbsp;
                    sel.attr("fill", color);
                span.
                  &nbsp;
                  }
                span.fragment(data-fragment-index="3").
                  &nbsp;
                  &nbsp;
                  colorize.color = function(arg) {
                span.fragment(data-fragment-index="7").
                  &nbsp;
                    color = arg;
                span.fragment(data-fragment-index="8").
                  &nbsp;
                    return colorize;
                span.fragment(data-fragment-index="3").
                  &nbsp;
                  };

                span.fragment(data-fragment-index="4").
                  &nbsp;
                  colorize.color("orange"); // has functions
                span.fragment(data-fragment-index="1").
                  &nbsp;
                  colorize(sel); // is a function
                span.fragment(data-fragment-index="2").
                  &nbsp;
                  &nbsp;
                  // OR
                  &nbsp;
                  d3.selectAll("circle")
                    .call(colorize
                span.fragment(data-fragment-index="9").
                  .color("orange")
                span.fragment(data-fragment-index="2").
                  );
          section
            h3(data-markdown) *function* that has *function*
            pre.highlight
              .code.javascript
                span.
                  &nbsp;
                  var color = "gray";
                  function colorize(sel) {
                    sel.attr("fill", color);
                  }
                  &nbsp;
                  colorize.color = function(arg) {
                    color = arg;
                    return colorize;
                span.
                  &nbsp;
                  };
                span.fragment(data-fragment-index="3").
                  &nbsp;
                  &nbsp;
                  &nbsp;
                  &nbsp;
                  d3.selectAll("rect")
                    .call(colorize.color("cyan"));
                span.
                  &nbsp;
                  &nbsp;
                  d3.selectAll("circle")
                    .call(colorize.color("orange"));
          section
            h3(data-markdown) *function* that has *function*
            pre.highlight
              .code.javascript
                span.fragment(data-fragment-index="2").
                  d3.colorize = function() {
                span.
                  &nbsp;
                    var color = "gray";
                    function colorize(sel) {
                      sel.attr("fill", color);
                    };
                    &nbsp;
                    colorize.color = function(arg) {
                span.fragment(data-fragment-index="4").
                  &nbsp;
                      if (arguments.length == 0) { return color; }
                span.
                  &nbsp;
                      color = arg;
                      return colorize;
                    }
                span.fragment(data-fragment-index="2").
                  &nbsp;
                    return colorize;
                  }
                span.fragment(data-fragment-index="3").
                  &nbsp;
                  &nbsp;
                  var colorize = d3.colorize();
                  &nbsp;
                span.
                  &nbsp;
                  d3.selectAll("circle")
                    .call(colorize.color("orange"));
          section
            h2 What did we achieve?
            h4.fragment Separated function calling from argument passing
            h4.fragment Created reusable code
            h4.fragment Defined a "class", d3 style
            h4.fragment (Moved messy code out of the way)
            h4.fragment Now you know how to read the d3 source
          section
            h3 d3.axis()
            pre
              code.javascript.
                import {slice} from "./array";
                import identity from "./identity";

                var top = 1,
                    right = 2,
                    bottom = 3,
                    left = 4,
                    epsilon = 1e-6;

                function translateX(scale0, scale1, d) {
                  var x = scale0(d);
                  return "translate(" + (isFinite(x) ? x : scale1(d)) + ",0)";
                }

                function translateY(scale0, scale1, d) {
                  var y = scale0(d);
                  return "translate(0," + (isFinite(y) ? y : scale1(d)) + ")";
                }

                function center(scale) {
                  var offset = scale.bandwidth() / 2;
                  if (scale.round()) offset = Math.round(offset);
                  return function(d) {
                    return scale(d) + offset;
                  };
                }

                function entering() {
                  return !this.__axis;
                }

                function axis(orient, scale) {
                  var tickArguments = [],
                      tickValues = null,
                      tickFormat = null,
                      tickSizeInner = 6,
                      tickSizeOuter = 6,
                      tickPadding = 3;

                  function axis(context) {
                    var values = tickValues == null ? (scale.ticks ? scale.ticks.apply(scale, tickArguments) : scale.domain()) : tickValues,
                        format = tickFormat == null ? (scale.tickFormat ? scale.tickFormat.apply(scale, tickArguments) : identity) : tickFormat,
                        spacing = Math.max(tickSizeInner, 0) + tickPadding,
                        transform = orient === top || orient === bottom ? translateX : translateY,
                        range = scale.range(),
                        range0 = range[0] + 0.5,
                        range1 = range[range.length - 1] + 0.5,
                        position = (scale.bandwidth ? center : identity)(scale.copy()),
                        selection = context.selection ? context.selection() : context,
                        path = selection.selectAll(".domain").data([null]),
                        tick = selection.selectAll(".tick").data(values, scale).order(),
                        tickExit = tick.exit(),
                        tickEnter = tick.enter().append("g").attr("class", "tick"),
                        line = tick.select("line"),
                        text = tick.select("text"),
                        k = orient === top || orient === left ? -1 : 1,
                        x, y = orient === left || orient === right ? (x = "x", "y") : (x = "y", "x");

                    path = path.merge(path.enter().insert("path", ".tick")
                        .attr("class", "domain")
                        .attr("stroke", "#000"));

                    tick = tick.merge(tickEnter);

                    line = line.merge(tickEnter.append("line")
                        .attr("stroke", "#000")
                        .attr(x + "2", k * tickSizeInner)
                        .attr(y + "1", 0.5)
                        .attr(y + "2", 0.5));

                    text = text.merge(tickEnter.append("text")
                        .attr("fill", "#000")
                        .attr(x, k * spacing)
                        .attr(y, 0.5)
                        .attr("dy", orient === top ? "0em" : orient === bottom ? "0.71em" : "0.32em"));

                    if (context !== selection) {
                      path = path.transition(context);
                      tick = tick.transition(context);
                      line = line.transition(context);
                      text = text.transition(context);

                      tickExit = tickExit.transition(context)
                          .attr("opacity", epsilon)
                          .attr("transform", function(d) { return transform(position, this.parentNode.__axis || position, d); });

                      tickEnter
                          .attr("opacity", epsilon)
                          .attr("transform", function(d) { return transform(this.parentNode.__axis || position, position, d); });
                    }

                    tickExit.remove();

                    path
                        .attr("d", orient === left || orient == right
                            ? "M" + k * tickSizeOuter + "," + range0 + "H0.5V" + range1 + "H" + k * tickSizeOuter
                            : "M" + range0 + "," + k * tickSizeOuter + "V0.5H" + range1 + "V" + k * tickSizeOuter);

                    tick
                        .attr("opacity", 1)
                        .attr("transform", function(d) { return transform(position, position, d); });

                    line
                        .attr(x + "2", k * tickSizeInner);

                    text
                        .attr(x, k * spacing)
                        .text(format);

                    selection.filter(entering)
                        .attr("fill", "none")
                        .attr("font-size", 10)
                        .attr("font-family", "sans-serif")
                        .attr("text-anchor", orient === right ? "start" : orient === left ? "end" : "middle");

                    selection
                        .each(function() { this.__axis = position; });
                  }

                  axis.scale = function(_) {
                    return arguments.length ? (scale = _, axis) : scale;
                  };

                  axis.ticks = function() {
                    return tickArguments = slice.call(arguments), axis;
                  };

                  axis.tickArguments = function(_) {
                    return arguments.length ? (tickArguments = _ == null ? [] : slice.call(_), axis) : tickArguments.slice();
                  };

                  axis.tickValues = function(_) {
                    return arguments.length ? (tickValues = _ == null ? null : slice.call(_), axis) : tickValues && tickValues.slice();
                  };

                  axis.tickFormat = function(_) {
                    return arguments.length ? (tickFormat = _, axis) : tickFormat;
                  };

                  axis.tickSize = function(_) {
                    return arguments.length ? (tickSizeInner = tickSizeOuter = +_, axis) : tickSizeInner;
                  };

                  axis.tickSizeInner = function(_) {
                    return arguments.length ? (tickSizeInner = +_, axis) : tickSizeInner;
                  };

                  axis.tickSizeOuter = function(_) {
                    return arguments.length ? (tickSizeOuter = +_, axis) : tickSizeOuter;
                  };

                  axis.tickPadding = function(_) {
                    return arguments.length ? (tickPadding = +_, axis) : tickPadding;
                  };

                  return axis;
                }

                export function axisTop(scale) {
                  return axis(top, scale);
                }

                export function axisRight(scale) {
                  return axis(right, scale);
                }

                export function axisBottom(scale) {
                  return axis(bottom, scale);
                }

                export function axisLeft(scale) {
                  return axis(left, scale);
                }

        section
          section
            h2 UI with D3
        section(data-background-iframe="http://codepen.io/meetamit/full/MwYGdZ")
          section
            h3 Data as View Model
            h4.link-frame.fragment
              a(href="http://codepen.io/meetamit/full/MwYGdZ", target="_blank") codepen.io/meetamit/full/MwYGdZ
          section
            pre.highlight
              .code.javascript.
                var buttons = [
                  { label: "A", rgb: "#ffdd99" },
                  { label: "B", rgb: "#aaffdd" },
                  { label: "C", rgb: "#ffaaee" },
                  { label: "D", rgb: "#aaff99" }
                ];
            pre.highlight.fragment
              .code.javascript.
                function update() {
                  var btn = d3.select("body").selectAll("button")
                    .data(buttons);
                  btn.enter()
                    .append("button")
                    .attr("class", "btn")
                    .text(function(d) { return d.label; })
                }
          section
            h3(data-markdown) State selection
            pre.highlight
              .code.javascript
                span.
                  var selected = buttons[1]; // { label: "B", rgb: "#aaffdd" }

                  function update() {
                    // ....
                span.fragment(data-fragment-index="1").
                  &nbsp;
                    btn
                      .classed("selected", function(d, i) {
                        return d == selected;
                      })
                span.fragment(data-fragment-index="2").
                  &nbsp;
                      .on("click", function(d) {
                        selected = d;
                        update();
                      });
                span.fragment(data-fragment-index="3").
                  &nbsp;
                  &nbsp;
                    d3.select("body")
                      .style("background", selected.rgb);
                span.
                  &nbsp;
                  }
        section
          section(data-background-iframe="http://codepen.io/meetamit/full/xbxddo")
            h3(data-markdown) d3.behavior.**drag**()
            h4.link-frame.fragment.current-visible
              a(href="http://codepen.io/meetamit/full/xbxddo", target="_blank") codepen.io/meetamit/full/xbxddo
          section(data-background="lib/img/time-slider.png", data-background-size="800px")
            pre.fragment(data-fragment-index="1")
              .code.highlight.javascript
                span.
                  var drag = d3.behavior.drag();
                span.fragment(data-fragment-index="2").
                  &nbsp;
                  &nbsp;
                  svg.select(".slider-handle")
                    .call(drag);
                span.fragment(data-fragment-index="3").
                  &nbsp;
                  &nbsp;
                  drag
                    .on("dragstart", function(d,i) { })
                    .on("drag", function(d, i) {
                span.fragment(data-fragment-index="4").
                  &nbsp;
                      var mousePosition = d3.mouse(this.parentNode); // [654, 321]
                      d3.select(this)
                        .attr("cx", mousePosition[0])
                span.fragment(data-fragment-index="3").
                  &nbsp;
                    })
        section
          section
            h3 d3 for all the things
          section(data-background="lib/img/scatter.png", data-background-size="800px")
            pre.fragment(data-fragment-index="1")
              .code.highlight.javascript
                span.
                  var axesG = svg.append("g");
                span.fragment.
                  &nbsp;
                  var xAxis = d3.axisBottom()
                    .scale(xScale)
                span.fragment.
                  &nbsp;
                  var xAxisG = axesG
                    .append("g")
                    .attr("x axis")
                    .call(xAxis)
                span.fragment.
                  &nbsp;
                  var yAxisG = axesG
                    .append("g")
                    .attr("y axis")
                    .____

                span.fragment.
                  &nbsp;
                  var circlesG = svg.append("g");
                span.fragment.
                  &nbsp;
                  var circles = circlesG.selectAll("circle")
                    .data(scatterData)
                span.fragment.
                  &nbsp;
                  var circlesEnter = circles.enter()
                    .append("circle")
                    .attr("cx", function(d,i) {...})
                    .____

                span.fragment.
                  &nbsp;
                  var benchmarksG = svg.append("g");
                  var benchmarks = benchmarksG.selectAll("line")
                    .data(benchmarksData)
                    .____
                span.fragment.
                  &nbsp;
                  var labelsG = svg.append("g");
                    .____
          section(data-background="lib/img/scatter.png", data-background-size="800px")
            pre.fragment(data-fragment-index="1")
              .code.highlight.javascript
                span.
                  var layers = ["axes", "circles", "benchmarks", "labels"]
                span.fragment(data-fragment-index="2").
                  &nbsp;
                  function update() {
                span.fragment(data-fragment-index="3").
                  &nbsp;
                    var layerG = svg.selectAll("g.layer")
                      .data(layers);
                    layerG.enter()
                      .append("g");
                span.fragment(data-fragment-index="4").
                  &nbsp;
                    layerG.each(function(d, i) {
                span.fragment(data-fragment-index="5").
                  &nbsp;
                      switch(d) {
                        case "circles":
                          d3.select(this)
                            .datum(scatterData)
                            .call(scatterPlot);
                          break;
                span.fragment(data-fragment-index="6").
                  &nbsp;
                        case "axes":
                          var axes = d3.select(this).selectAll("g.axis")
                            .data(["x", "y"])
                          axes.enter()
                            .append("g")
                            .attr("transform", function(d,i) {
                              if(d == "x") {...}
                            })
                            ...
                          break;
                span.fragment(data-fragment-index="5").
                  &nbsp;
                      }
                span.fragment(data-fragment-index="4").
                  &nbsp;
                    });
                span.fragment(data-fragment-index="2").
                  &nbsp;
                  }
        section
          h2 The End
          h4 Thank you for watching

        section
          h1 next level d3
          p(style="line-height:.8; margin-bottom:0;")
            small By <a href="http://two-n.com">Amit Schechter</a> / <a href="http://twitter.com/meetamit">@meetamit</a>
            br
            small Co-founder, <a href="http://two-n.com">TWO-N</a>
            br
            a(href="http://two-n.com", style="display:inline-block; opacity:.6; background:url(lib/img/2n_logo.png) no-repeat center center; background-size:contain; width:90px; height:90px;")
            br
          br
          p Slides available at
            br
            a(href="http://www.two-n.com/talks/next-level-d3") www.two-n.com/talks/next-level-d3


    script(src="lib/js/head.min.js")
    script(src="js/reveal.js")
    script(src="lib/js/d3.min.js")

    script.

      // Full list of configuration options available here:
      // https://github.com/hakimel/reveal.js#configuration
      Reveal.initialize({
        controls: true,
        progress: true,
        history: true,
        center: true,

        theme: Reveal.getQueryHash().theme, // available themes are in /css/theme
        transition: Reveal.getQueryHash().transition || 'fade', // default/cube/page/concave/zoom/linear/fade/none

        // Parallax scrolling
        // parallaxBackgroundImage: 'https://s3.amazonaws.com/hakim-static/reveal-js/reveal-parallax-1.jpg',
        // parallaxBackgroundSize: '2100px 900px',

        // Optional libraries used to extend on reveal.js
        dependencies: [
          { src: 'lib/js/classList.js', condition: function() { return !document.body.classList; } },
          { src: 'plugin/markdown/marked.js', condition: function() { return !!document.querySelector( '[data-markdown]' ); } },
          { src: 'plugin/markdown/markdown.js', condition: function() { return !!document.querySelector( '[data-markdown]' ); } },
          { src: 'plugin/highlight/highlight.js', async: true, callback: function() {
              [].forEach.call( document.querySelectorAll( '.highlight, pre code' ), function( v, i) {
                  hljs.highlightBlock(v);
              });
          } },
          { src: 'plugin/zoom-js/zoom.js', async: true, condition: function() { return !!document.body.classList; } },
          { src: 'plugin/notes/notes.js', async: true, condition: function() { return !!document.body.classList; } }
        ]
      });
    script.
      (function(i,s,o,g,r,a,m){i['GoogleAnalyticsObject']=r;i[r]=i[r]||function(){
      (i[r].q=i[r].q||[]).push(arguments)},i[r].l=1*new Date();a=s.createElement(o),
      m=s.getElementsByTagName(o)[0];a.async=1;a.src=g;m.parentNode.insertBefore(a,m)
      })(window,document,'script','//www.google-analytics.com/analytics.js','ga');

      ga('create', 'UA-48893056-2', 'two-n.com');
      ga('send', 'pageview');
